/* -*- mode: fundamental; c-file-style: "stroustrup"; indent-tabs-mode: nil -*- */

/* apyc: Bison Parser */

/* Authors: YOUR NAMES HERE */

%define semantic_tree_type "AST"

%token INT
%token STRING
//%token ID

%{
  #include <string>
  #include <typeinfo>
  #include "apyc.h"
  #include "ast.h"

  using namespace std;

  static AST_Ptr theTree;

  static bool contains_comma (const char* inp) { 
    string match = string(inp);
    if (match.find(",") > 0) return true;
    return false;
  }
%}

%debug
%define error_function error

/* A token declaration such as
 *   %token INDENT
 * declares a new integer constant INDENT, which serves as a syntactic category
 * (suitable for output by the lexer) identifying a kind of token, which we
 * also often refer to as INDENT. A declaration such as
 *   %token IF "if"
 * defines a constant IF and makes it the syntactic category for the token
 * "if".  The built-in function yyexternal_token_name(...) maps between 
 * syntactic categories (like IF) and the token strings defined in these 
 * %token declarations (like "if").  
 *
 * The Horn system uses tokens as leaf nodes and as AST node operators.  A
 * rule such as
 *     if_stmt: "if"^ expression ":"! ...
 * with no action, by default creates an AST node whose operator is an "if"
 * token (with syntactic category IF, given the %token declaration above).
 * When the node type does not correspond to a token that appears in the 
 * program, we define a dummy token type that serves only as an AST
 * node type.  For example, we can define
 *     %token DICT_DISPLAY ...
 * and then use
 *     dict_display: "{"! key_datum_list? "}"! 
 *              { $$ = $^(DICT_DISPLAY, $*); }
 * in the grammar (using DICT_DISPLAY only in actions, not as a grammar
 * symbol).
 *
 * In this skeleton, we've used a simple kludge to extract the printed forms
 * of AST operators from the operators themselves.  When a token such as IF
 * is the operator, yyexternal_token_name returns the operator name directly.
 * When there is no such correspondence, as with DICT_DISPLAY, we'll define
 *     %token DICT_DISPLAY "@dict_display"
 * Since "@dict_display" is not a valid token (it would be an error for this
 * to appear in any Python program) and does not appear in the grammar, this
 * declaration has no effect on the language recognized.  However, it
 * still provides an easy way to find the external name of an operator (just
 * strip off the leading "@").  (We can't just use "dict_display", since that
 * would tell Horn to define 'dict_display' as a token, whereas it would be a
 * simple identifier if it actually appeared in a Python program.  This is
 * where the kludginess comes in.) The AST_Tree::external_name method does
 * this conversion, converting tokens that are supposed to represent
 * node operators to printable strings.
 */
%left "="
%left "+" "-"
%left "*" "/"
%right "**"

%token PRINTLN "@println"
%token PRINT "@print"
%token EMPTY
%token INDENT "/t"
%token EXPR_LIST "@expr_list"
%token IF_EXPR "@if_expr"
%token ASSIGN_STMT "@assign"
%token U_EXPR "@unop"
%token B_EXPR "@binop"
%token MODULE "@module"
%token CONTINUE "@continue"
%token COMPARE "@compare"
%token AND "@and"
%token OR "@or"
%token PASS
%token NEWLINE
%token RETURN "@return"
%token IDENTIFIER "@id"

//Item Tokens
%token TUPLE "@tuple"

//Arithmetic Tokens
%token PLUS "+"
%token MINUS "-"
%token TIMES "*"
%token DIVIDE "/"
%token MODULUS "%"
%token EQSET "="
%token FLOORDIVIDE "//"
%token EXPONENT "**"

//Comparison Tokens
%token LT "<"
%token GT ">"
%token LTE "<="
%token GTE ">="
%token EQ "=="
%token NE "!="
%token IN "in"
%token NOTIN "notin"
%token IS "is"
%token NOT "not"
%token ISNOT "isnot"

//Declaration Tokens
%token TYPEDEF "::"
%token TYPE "@type"
%token TYPEVAR "@type_var"
%token TYPEDID "@typed_id"
%token TYPELIST "@type_list"
%token TARGETLIST "@target_list"

/* FIXME: MORE... */
// TODO: add more tokens

%%

program : stmt_list   { theTree = $^(MODULE, $*); $$ = NULL; }
        ;

//TODO: ';' can be newline?
stmt_list       : simple_stmt ((";"!|'\n'!) simple_stmt)* (";"!|'\n'!)?
                ;

simple_stmt     : print_stmt //expression_stmt
                | assignment_stmt
                | pass_stmt
                | print_stmt '\n'!
                | return_stmt
                | break_stmt
                | continue_stmt
                ;

//expression_stmt : expression_list
//                ;

pass_stmt : "pass" { $$ = NULL; }
          ;

print_stmt : "print" expression_list { if ($expression_list.loc() == NULL) $$ = $^(PRINTLN, $^(EMPTY), $expression_list);
                                       else {
                                       int index = strlen($expression_list.loc());
                                       if (index == 2) index = 1; else if (index == 1) index=0; else index -=2;
                                       if ($expression_list.loc()[index] == ',')
                                         $$ = $^(PRINT, $^(EMPTY), $expression_list);
                                       else
                                         $$ = $^(PRINTLN, $^(EMPTY), $expression_list); }}
           | "print" ">>"! expression ','! expression_list
                                      { if ($expression_list.loc() == NULL) $$ = $^(PRINTLN, $expression, $expression_list);
                                       else {
                                       int index = strlen($expression_list.loc());
                                       if (index == 2) index = 1; else if (index == 1) index=0; else index -=2;
                                       if ($expression_list.loc()[index] == ',')
                                         $$ = $^(PRINT, $expression, $expression_list);
                                       else
                                         $$ = $^(PRINTLN, $expression, $expression_list); }}
           ;

break_stmt : "break"^
           ;

continue_stmt : "continue"^
              ;

return_stmt : "return" (expression)?   { if (!$expression.missing()) $$ = $^(RETURN, $expression);
                                         else $$ = $^(RETURN, $^(EMPTY)); } 
            ;


/***************    COMMENTED OUT FOR NOW TODO
compound_stmt   : if_stmt
//                | while_stmt
//                | for_stmt
//                | funcdef
//                | classdef
                ;

statement       : stmt_list NEWLINE | compound_stmt
                ;

suite           : stmt_list NEWLINE
                | NEWLINE INDENT statement+ //DEDENT
                ;

if_stmt         : "if" expression ":" suite
//                ( "elif" expression ":" suite )*
//                ("else" ":" suite)?
                ;

************/


expression_list : expression (comma=","! expression)* (","!)? { $$ = $^(EXPR_LIST, $*); }
    | /*empty*/       { $$ = $^(EXPR_LIST); }
    ;

/* This is a special expression_list declaration so that parenthesized expressions will not evaluate as a list unless they actually are a list.
   By doing it this way, I avoid any reduce errors and can avoid problems with the normal expression_list declaration */
expression_list_paren : expression
    | expression (comma=","! expression)+ (","!)? { $$ = $^(EXPR_LIST, $*); }
    | /*empty*/       { $$ = $^(EXPR_LIST); }
    ;

tuple_expr : expression
           | expression (comma=","! expression)+ (","!)? { $$ = $^(TUPLE, $*); }
           | /*empty*/       { $$ = $^(TUPLE); }
           ;

expression : conditional_expression
           ;

//TODO: finish up assign. This is only here as a placeholder
assignment_stmt : target_list "="! tuple_expr { $$ = $^(ASSIGN_STMT, $target_list, $tuple_expr); }
                | target_list "="! (target_list "="!)+ tuple_expr {$$ = $^(ASSIGN_STMT, $^(TARGETLIST, $target_list), $tuple_expr);}
                ;
  
//TODO: check that $expression_list_paren is a valid assignment
/* for $expression_list_paren, it must be only a list of identifiers*/
target_list     : target
//                | expression_list_paren   {$$ = $^(TARGETLIST, $expression_list_paren);}// fix this....it should be TARGETLIST
                | t1=target (","! target)+ (","!)?   {$$ = $^(TARGETLIST, $*);} 
                ;
  
//TODO: test the ( target_list ) and [ target_list ] productions
/* First rule is for i::int, asdf::$typevar, etc */
target          : var=IDENTIFIER "::"! (typevar="$")? type=IDENTIFIER { if ($typevar.missing())
                                                                            $$ = $^(TYPEDID, $var, $^(TYPE, $type, $^(TYPELIST)));
                                                                           else
                                                                            $$ = $^(TYPEDID, $var, $^(TYPEVAR, $type)); }
                | "("! target_list ")"!
                | "["! target_list "]"!
//                | attributeref
//                | subscription
//                | slicing
                ;

           
conditional_expression : or_test
                       | EZERO=or_test "if" T=or_test "else" EONE=expression  { $$ = $^(IF_EXPR, $T, $EZERO, $EONE); }
                       ;

or_test : and_test | or_test op="or"! and_test     { if (!$op.missing()) $$ = $^(OR, $*); }
        ;
  
and_test : not_test | and_test op="and"! not_test      { if (!$op.missing()) $$ = $^(AND, $*); }
         ;

not_test : comparison
         | "not" not_test               { $$ = $^(U_EXPR, $*); }
         ;



/* ATOMS */
// TODO: fill in the rest of atom
atom : INT_LITERAL 
     | IDENTIFIER
     | enclosure
     ;

enclosure : parenth_form 
//          | list_display 
//          | dict_display
          ;

parenth_form : "("! expression_list_paren ")"! 
             ;

//list_display : "["! (expression_list)? "]"!
//             ;
  
//key_datum_list : key_datum (","! key_datum)* (","!)?
//               ;
 
//key_datum : expression ":" expression
//          ;

//dict_display : "{"! (key_datum_list)? "}"!
//             ;
  
//key_datum_list : key_datum (","! key_datum)* (","!)?
//               ;
 
//key_datum : expression ":" expression
//          ;

/* PRIMARIES + SLICING */
primary : atom 
//        | attributeref 
//        | subscription 
//        | slicing 
//        | call
        ;



/* MATH EXPRESSIONS */
power : primary (power="**" u_expr)? { if (!$power.missing()) $$ = $^(B_EXPR, $*); }
      ;

u_expr : power
       | op="+" u_expr {$$ = $^(U_EXPR, $*);}
       | op="-" u_expr {$$ = $^(U_EXPR, $*);}
       | op="~" u_expr {$$ = $^(U_EXPR, $*);}
       ;

m_expr : u_expr 
       | m_expr op="*" u_expr     {$$ = $^(B_EXPR, $*);}
       | m_expr op="//" u_expr    {$$ = $^(B_EXPR, $*);}
       | m_expr op="/" u_expr     {$$ = $^(B_EXPR, $*);}
       | m_expr op="%" u_expr     {$$ = $^(B_EXPR, $*);}
       ;
  
a_expr : m_expr 
       | a_expr op="+" m_expr     {$$ = $^(B_EXPR, $*);}
       | a_expr op="-" m_expr     {$$ = $^(B_EXPR, $*);}
       ;


comparison : a_expr (comp_operator a_expr)* { if (!$comp_operator.missing()) $$ = $^(COMPARE, $*); }
           ;
  
comp_operator :  "<" | ">" | "==" | ">=" | "<=" | "!="
              | "is" ("not")? | ("not")? "in"
              ;


/* Normally, throw away whitespace other than newline. */
* : (' ' | '\t' | '\r')+ ;

/* AUXILIARY LEXICAL SYMBOLS */

_Lowercase : 'a' .. 'z'
           ;

_Uppercase : 'A' .. 'Z'
           ;

_Letter : _Lowercase | _Uppercase
        ;

_Digit : '0' .. '9'
       ;

/* LEXICAL SYMBOLS */

INT_LITERAL : ('1' .. '9') ('0' .. '9')* | '0' | "0" ('0' .. '7')+ | "0" ("x" | "X") ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F')+
            ;

//decimalinteger : ('1' .. '9') ('0' .. '9')* | '0'
//               ;

//octinteger : "0" ('0' .. '7')+
//           ;
  
//hexinteger : "0" ("x" | "X") (_Digit | _Hexletter)+
//           ;

//_HexLetter : _Hexlower | _Hexupper;

//_Hexlower  : 'a' .. 'f' ;
//_Hexupper  : 'A' .. 'F' ;

IDENTIFIER : (_Letter|"_") (_Letter | _Digit | "_")* 
           ;

STRING : "\"\"" /* TODO: FIXME */ ;

RAWSTRING : "r\"\"" /* TODO: FIXME */ ;

%%

bool debugParser;

int
AST::lineNumber ()
{
    return yylocation_line (loc ());
}

void
parse (FILE* f, const string& name)
{
    if (debugParser)
        yydebug = 1;
    yypush_lexer (f, name);
    theTree = NULL;
    yyparse ();
    if (theTree != NULL) {
        theTree->print (cout, 0);
    }
}
